// <auto-generated />
using System;
using CardioTrackAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CardioTrackAPI.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardioTrackAPI.Model.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surnames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.Exam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientAge")
                        .HasColumnType("int");

                    b.Property<string>("PatientGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonalBackgroundId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonalBackgroundId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.OtherPersonalBackground", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonalBackgroundId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonalBackgroundId");

                    b.ToTable("OtherPersonalBackground");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PasswordRecoverToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordRecoverToken");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surnames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackground", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Angina")
                        .HasColumnType("bit");

                    b.Property<bool>("ArterialHypertension")
                        .HasColumnType("bit");

                    b.Property<bool>("Asthma")
                        .HasColumnType("bit");

                    b.Property<bool>("Chagas")
                        .HasColumnType("bit");

                    b.Property<bool>("DiabetesMellitus")
                        .HasColumnType("bit");

                    b.Property<bool>("Dyslipidemia")
                        .HasColumnType("bit");

                    b.Property<bool>("Homeopathy")
                        .HasColumnType("bit");

                    b.Property<bool>("LiverDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicineAllergy")
                        .HasColumnType("bit");

                    b.Property<bool>("MyocardialInfarction")
                        .HasColumnType("bit");

                    b.Property<long>("ObstetricId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Pneumopathy")
                        .HasColumnType("bit");

                    b.Property<bool>("Stroke")
                        .HasColumnType("bit");

                    b.Property<bool>("Surgery")
                        .HasColumnType("bit");

                    b.Property<string>("SurgeryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Thyroidopathy")
                        .HasColumnType("bit");

                    b.Property<bool>("Toxics")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ObstetricId");

                    b.ToTable("PersonalBackground");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackgroundMedicine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonalBackgroundId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonalBackgroundId");

                    b.ToTable("PersonalBackgroundMedicine");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackgroundMedicineAllergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonalBackgroundId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonalBackgroundId");

                    b.ToTable("PersonalBackgroundMedicineAllergy");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackgroundObstetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Abortion")
                        .HasColumnType("bit");

                    b.Property<bool>("Caesarean")
                        .HasColumnType("bit");

                    b.Property<string>("For")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("GestationWeeks")
                        .HasColumnType("int");

                    b.Property<bool>("Stillbirth")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PersonalBackgroundObstetric");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackgroundToxics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonalBackgroundId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonalBackgroundId");

                    b.ToTable("PersonalBackgroundToxic");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastPasswordRecoveryTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.Doctor", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.Exam", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardioTrackAPI.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardioTrackAPI.Model.PersonalBackground", "PersonalBackground")
                        .WithMany()
                        .HasForeignKey("PersonalBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("PersonalBackground");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.OtherPersonalBackground", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.PersonalBackground", "personalBackground")
                        .WithMany()
                        .HasForeignKey("PersonalBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("personalBackground");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PasswordRecoverToken", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.Patient", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackground", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.PersonalBackgroundObstetric", "Obstetric")
                        .WithMany()
                        .HasForeignKey("ObstetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obstetric");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackgroundMedicine", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.PersonalBackground", "PersonalBackground")
                        .WithMany()
                        .HasForeignKey("PersonalBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalBackground");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackgroundMedicineAllergy", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.PersonalBackground", "PersonalBackground")
                        .WithMany()
                        .HasForeignKey("PersonalBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalBackground");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.PersonalBackgroundToxics", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.PersonalBackground", "PersonalBackground")
                        .WithMany()
                        .HasForeignKey("PersonalBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalBackground");
                });

            modelBuilder.Entity("CardioTrackAPI.Model.User", b =>
                {
                    b.HasOne("CardioTrackAPI.Model.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });
#pragma warning restore 612, 618
        }
    }
}
